# CONFIGURATION FILE ---------------------------------------------------------
configfile: 'config.yaml'
# ----------------------------------------------------------------------------

from os.path import abspath

# GENERAL VARIABLES ----------------------------------------------------------

SCRIPT_DIR          = config.get('script_dir', '../../scripts')

BENCHMARK_DIR       = config.get('benchmark_dir', 'benchmarks')
DING_DIR            = config.get('ding_dir')
GUROBI_BIN          = config.get('gurobi_bin', 'gurobi_cl')
ILP_DIR             = config.get('ilp_dir', 'ilp')
ILP_NO_THREADS      = config.get('ilp_number_of_threads', 1)
LOG_DIR             = config.get('log_dir', 'logs')
PLOT_DIR            = config.get('plot_dir', 'plots')
RESULT_DIR          = config.get('result_dir', 'results')
SIMULATION_DIR      = config.get('simulated_evolution_dir', 'simulated_evolution')

# GENOME EVOLUTION -----------------------------------------------------------

NO_GENES            = config.get('number_of_genes', [10])
NO_CHRS             = config.get('number_of_chromosomes', [3])
DUP_RATES           = config.get('duplication_rates', [0])
INS_RATES           = config.get('insertion_rates', [0])
DEL_RATES           = config.get('deletion_rates', [0])
DISTANCES           = config.get('distances', [5])
TREE_NWK            = f'{SIMULATION_DIR}/twotree.nwk'
TREE_TAB            = f'{SIMULATION_DIR}/twotree.tsv'

# ----------------------------------------------------------------------------

from os.path import basename

# INITIAL RULE ---------------------------------------------------------------
rule all:
    input:
        expand(f'{RESULT_DIR}/g{{no_genes}}_x{{no_chrs}}_dup{{dup_rate}}' +
                '_ins{ins_rate}_del{del_rate}_s{distance}/{methods}.fa',
                no_genes = NO_GENES, no_chrs = NO_CHRS, dup_rate = DUP_RATES,
                ins_rate = INS_RATES, del_rate = DEL_RATES, distance =
                DISTANCES, methods = ('SPP_DCJ', 'DING'))


# -----------------------------------------------------------------------------


rule generate_simple_tree:
    output:
        nwk = TREE_NWK,
        tab = TREE_TAB
    shell:
        'echo \'(A:0.5,B:0.5):0;\' > {output.nwk};'
        'echo -e \'A\\tB\' > {output.tab}'


rule simulate_evolution:
    params:
        n = '{no_genes}',
        nchr = '{nchr}',
        dup_rate = '{dup_rate}',
        ins_rate = '{ins_rate}',
        del_rate = '{del_rate}',
        d = '{distance}'
    input:
        tree = TREE_NWK
    output:
        f'{SIMULATION_DIR}/g{{no_genes}}_x{{nchr}}_dup{{dup_rate}}' +
        '_ins{ins_rate}_del{del_rate}_s{distance}.fa'
    log:
        f'{LOG_DIR}/simulate_dcj_g{{no_genes}}_x{{nchr}}_dup{{dup_rate}}' +
        '_ins{ins_rate}_del{del_rate}_s{distance}.log'
    shell:
        f'{SCRIPT_DIR}/simulate_dcj.py -g {{params.n}} -x {{params.nchr}} ' +
        '-d {params.dup_rate}  -i {params.ins_rate}  -e {params.del_rate} ' +
        '-l -s {params.d} {input.tree} > {output} 2> {log}'


rule unimog_to_adjacencies:
    input:
        f'{SIMULATION_DIR}/{{unimog_file}}.fa'
    output:
        f'{SIMULATION_DIR}/{{unimog_file}}.adjs'
    shell:
        f'{SCRIPT_DIR}/unimog2adjacencies.py {{input}} > {{output}}'


rule construct_ilp_spp:
    input:
        tree = TREE_TAB,
        adjs = f'{SIMULATION_DIR}/{{unimog_file}}.adjs'
    output:
        ilp = f'{ILP_DIR}/{{unimog_file}}/SPP_DCJ.ilp',
        idMap = f'{ILP_DIR}/{{unimog_file}}/SPP_IdToExtremity.txt',
    log:
        f'{LOG_DIR}/spp_dcj_{{unimog_file}}.log',
    shell:
        f'{SCRIPT_DIR}/spp_dcj.py -a 1 -m {{output.idMap}} {{input.tree}} '+
        '{input.adjs} > {output.ilp} 2> {log}'


rule construct_ilp_ding:
    input:
        f'{SIMULATION_DIR}/{{unimog_file}}.fa'
    output:
        ilp = f'{ILP_DIR}/{{unimog_file}}/DING.ilp',
        idMap = f'{ILP_DIR}/{{unimog_file}}/DingUniqueOcc.txt',
    log:
        f'{LOG_DIR}/ding_{{unimog_file}}.log',
    shell:
        f'{DING_DIR}/ding_mrd.py -i {{input}} -u {{output.idMap}} -o '
        f'{{output.ilp}} -l {{log}}'


rule run_ilp:
    input:
        ilp = f'{ILP_DIR}/{{unimog_file}}/{{ilp}}.ilp',
    output:
        f'{ILP_DIR}/{{unimog_file,[^/]+}}/{{ilp}}.sol',
    params:
        time_limit = 120 * 60,
    threads:
        ILP_NO_THREADS
    benchmark:
        f'{BENCHMARK_DIR}/{{unimog_file}}_{{ilp}}.txt'
    log:
        f'{LOG_DIR}/gurobi_{{unimog_file}}_{{ilp}}.log',
    shell:
        f'{GUROBI_BIN} ResultFile={{output}} Threads={{threads}} ' +
        'TimeLimit={params.time_limit} {input} > {log}'


rule sol_to_unimog_spp:
    input:
        sol = f'{ILP_DIR}/{{unimog_file,[^/]+}}/SPP_DCJ.sol',
        idMap = f'{ILP_DIR}/{{unimog_file}}/SPP_IdToExtremity.txt',
    output:
        f'{RESULT_DIR}/{{unimog_file}}/SPP_DCJ.fa',
    log:
        f'{LOG_DIR}/sol2unimog_{{unimog_file}}_SPP_DCJ.log',
    shell:
        f'{SCRIPT_DIR}/sol2unimog.py {{input.sol}} {{input.idMap}} > '
        f'{{output}} 2> {{log}}'


rule parse_gurobi_mrd:
    input:
        sol = f'{ILP_DIR}/{{unimog_file,[^/]+}}/DING.sol',
        uniqueOcc = f'{ILP_DIR}/{{unimog_file}}/DingUniqueOcc.txt',
    output:
        f'{RESULT_DIR}/{{unimog_file}}/DING.fa',
    log:
        f'{LOG_DIR}/parse_solgur_mrd_{{unimog_file}}_DING.log',
    shell:
        f'{DING_DIR}/parse_solgur_mrd.py -i {{input.sol}} -u '
        f'{{input.uniqueOcc}} -o {{output}} > {{log}}'
